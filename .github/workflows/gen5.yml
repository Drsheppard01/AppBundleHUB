name: Build and Release AppBundles - NG

on:
  schedule:
    - cron: '0 0 * * 0'
  workflow_dispatch:
    inputs:
      script_pattern:
        description: "Pattern to match scripts to build (leave empty to build all)"
        required: false
        default: ""
      release:
        description: "Create a release (true/false)"
        required: false
        default: "true"

jobs:
  build_and_publish:
    name: Build, Publish AppBundles and Metadata
    runs-on: ubuntu-latest
    permissions: write-all
    container:
      image: "docker.io/azathothas/appbundler-alpine:latest"
      options: --privileged

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Remove non-compliant tools
        run: |
          apk del bash findutils gawk grep diffutils coreutils

      - name: Set up GOBIN and install lib4bin
        run: |
          set -x
          export GOBIN="$GITHUB_WORKSPACE/.local/bin"
          mkdir -p "$GOBIN"
          echo "GOBIN=$GOBIN" >> $GITHUB_ENV
          echo "PATH=$GOBIN:$PATH" >> $GITHUB_ENV
          export CGO_ENABLED="0" GO_LDFLAGS="-buildmode=static-pie" GOFLAGS="-ldflags=-static-pie -ldflags=-s -ldflags=-w"
          git clone --depth 1 --branch dev https://github.com/xplshn/pelf
          cp ./pelf/* "$GOBIN" || true
          cd ./pelf/cmd/dynexec/lib4bin
          go install .
          cd -
          cd ./pelf/cmd/misc/appstream_helper
          go install .

      - name: Set OUT_DIR environment variable
        run: |
          OUT_DIR="$GITHUB_WORKSPACE/APPBUNDLES"
          META_OUT_DIR="$GITHUB_WORKSPACE/APPBUNDLES_META"
          mkdir -p "$OUT_DIR" "$META_OUT_DIR"
          echo "OUT_DIR=${OUT_DIR}" >> $GITHUB_ENV
          echo "META_OUT_DIR=${META_OUT_DIR}" >> $GITHUB_ENV

      - name: Run selected build scripts
        run: |
          export PATH="$GITHUB_WORKSPACE/baseSystems:$PATH"
          echo "PATH=$PATH" >> $GITHUB_ENV

          cd $OUT_DIR
          SCRIPT_PATTERN="${{ github.event.inputs.script_pattern }}"
          if [ -z "$SCRIPT_PATTERN" ]; then
            echo "No script pattern provided, running all scripts."
            PATTERN=".*"
          else
            PATTERN="$SCRIPT_PATTERN"
          fi

          for script in "$GITHUB_WORKSPACE/recipes/"*/*.*sh; do
            if echo "$script" | grep -E "$PATTERN"; then
              chmod +x "$script"
              DEBUG=1 "$script"
            fi
          done

      - name: Generate metadata
        run: |
          set -x
          wget "https://huggingface.co/datasets/pkgforge/pkgcache/resolve/main/FLATPAK_APPSTREAM.xml"
          chmod +x ${{ github.workspace }}/.local/bin/appstream-helper
          ${{ github.workspace }}/.local/bin/appstream-helper --components-xml ./FLATPAK_APPSTREAM.xml --input-dir "${{ github.workspace }}" --output-dir "${{ github.workspace }}/APPBUNDLES_META" --output-file "${{ github.workspace }}/APPBUNDLES_META/metadata.json" --download-url-prefix "https://github.com/xplshn/AppBundleHUB/releases/download/${{ env.TAG_NAME }}/" --metadata-prefix "https://github.com/xplshn/AppBundleHUB/releases/download/latest_metadata/"

      - name: Create Git Tag
        if: ${{ github.event.inputs.release == 'true' }}
        run: |
          TAG_NAME="v$(date +'%Y%m%d%H%M%S')"
          git tag "$TAG_NAME"
          git push origin "$TAG_NAME"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

      - name: Create Release for AppBundles and Metadata
        if: ${{ github.event.inputs.release == 'true' }}
        uses: softprops/action-gh-release@v2.0.8
        with:
          name: "Weekly Release - ${{ env.TAG_NAME }}"
          tag_name: "${{ env.TAG_NAME }}"
          draft: false
          prerelease: ${{ github.event_name == 'workflow_dispatch' }}
          make_latest: true
          files: |
            ${{ env.OUT_DIR }}/*.AppBundle
            ${{ github.workspace }}/APPBUNDLES_META/metadata.json
        continue-on-error: true
