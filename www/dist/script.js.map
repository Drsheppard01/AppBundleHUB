{
  "version": 3,
  "sources": ["../shared.js", "../script.js"],
  "sourcesContent": ["// shared.js\nexport let apps = [];\n\n// Function to update the apps array\nexport function setApps(newApps) {\n    apps = newApps;\n}\n", "// script.js\nimport { setApps, apps } from './shared.js';\ndocument.addEventListener('DOMContentLoaded', async () => {\n    const appGrid = document.querySelector('.app-grid');\n    const categoryList = document.querySelector('.category-list');\n    const searchInput = document.querySelector('.search-input');\n\n    let categories = new Map();\n    let currentCategory = 'All';\n\n    // Fetch app data from the provided URL\n    async function fetchAppData() {\n        try {\n            const response = await fetch('https://corsproxy.io/?https://pkg.ajam.dev/x86_64/METADATA.AIO.json');\n            const data = await response.json();\n            setApps(data.pkg || []);\n            processCategories();\n            initializeFromUrl(); // Initialize state from URL after data is fetched.\n            displayApps();\n        } catch (error) {\n            console.error('Error fetching app data:', error);\n            appGrid.innerHTML = '<div class=\"error\">Failed to load applications. Please try again later.</div>';\n        }\n    }\n\n    // Initialize app state from URL parameters\n    function initializeFromUrl() {\n        const url = new URL(window.location);\n        const initialCategory = url.searchParams.get('category') || 'All';\n        const initialSearch = url.searchParams.get('search') || '';\n        const initialApp = url.searchParams.get('app') || '';\n\n        updateCategoryFilter(initialCategory);\n        displayApps(initialSearch);\n\n        if (initialApp) {\n            showAppDetails(initialApp, apps);\n        }\n    }\n\n    // Process categories from apps\n    function processCategories() {\n        categories.clear();\n        categories.set('All', apps.length);\n\n        apps.forEach(app => {\n            if (app.category) {\n                const appCategories = app.category.split(',').map(cat => cat.trim());\n                appCategories.forEach(category => {\n                    if (category) {\n                        const count = categories.get(category) || 0;\n                        categories.set(category, count + 1);\n                    }\n                });\n            }\n        });\n\n        const sortedCategories = new Map([\n            ['All', categories.get('All')],\n            ...Array.from(categories.entries())\n                .filter(([cat]) => cat !== 'All')\n                .sort((a, b) => a[0].localeCompare(b[0]))\n        ]);\n\n        categoryList.innerHTML = Array.from(sortedCategories.entries())\n            .map(([category, count]) => `\n                <li class=\"category-item ${category === currentCategory ? 'active' : ''}\"\n                    data-category=\"${category}\">\n                    <a class=\"menu-item flex items-center justify-between\">\n                        ${category}\n                        <span class=\"category-count badge badge-neutral\">${count}</span>\n                    </a>\n                </li>\n            `).join('');\n    }\n\n    // Filter apps by category\n    function filterAppsByCategory(category) {\n        if (category === 'All') {\n            return apps;\n        }\n        return apps.filter(app => {\n            if (!app.category) return false;\n            const appCategories = app.category.split(',').map(cat => cat.trim());\n            return appCategories.includes(category);\n        });\n    }\n\n    // Create app card HTML\n    function createAppCard(app) {\n        const categoryTags = app.category\n            ? app.category\n                .split(',')\n                .map(cat => cat.trim())\n                .filter(cat => cat)\n                .map(cat => `<span class=\"badge badge-sm badge-outline category-tag\" data-category=\"${cat}\">${cat}</span>`)\n                .join('')\n            : '';\n\n        return `\n            <div class=\"app-card card card-compact bg-base-100 shadow-md border border-base-300\" data-name=\"${app.name}\">\n                <figure class=\"px-4 pt-4\">\n                    <img src=\"${app.icon}\" alt=\"${app.name}\" class=\"app-icon w-16 h-16 object-contain rounded-md\" onerror=\"this.style.display='none';\">\n                </figure>\n                <div class=\"card-body\">\n                    <h2 class=\"card-title truncate\">${app.name}</h2>\n                    <p class=\"truncate text-base-content/70\">${app.description || 'No description available.'}</p>\n                    <div class=\"card-actions justify-end\">\n                        <div class=\"flex flex-wrap gap-2\">\n                            ${categoryTags}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    // Display the apps in the grid\n    function displayApps(searchTerm = '') {\n        let filteredApps = filterAppsByCategory(currentCategory);\n\n        if (searchTerm) {\n            const term = searchTerm.toLowerCase();\n            filteredApps = filteredApps.filter(app =>\n                app.name.toLowerCase().includes(term) ||\n                (app.description && app.description.toLowerCase().includes(term)) ||\n                (app.category && app.category.toLowerCase().includes(term))\n            );\n        }\n\n        const appCards = filteredApps.map(app => createAppCard(app));\n\n        appGrid.innerHTML = appCards.join('');\n\n        // Add event listeners to category tags in app cards\n        appGrid.querySelectorAll('.category-tag').forEach(tag => {\n            tag.addEventListener('click', (e) => {\n                e.stopPropagation();  // Prevent click from bubbling up to app card\n                const category = e.target.dataset.category;\n                updateCategoryFilter(category);\n            });\n        });\n\n        // Add event listeners to app cards\n        appGrid.querySelectorAll('.app-card').forEach(card => {\n            card.addEventListener('click', (e) => {\n                const appName = e.currentTarget.dataset.name;\n                showAppDetails(appName, apps);\n            });\n        });\n    }\n\n    // Update category filter and display apps\n    function updateCategoryFilter(category) {\n        document.querySelectorAll('.category-item').forEach(item => {\n            item.classList.remove('active');\n        });\n        const categoryItem = document.querySelector(`.category-item[data-category=\"${category}\"]`);\n        if (categoryItem) {\n            categoryItem.classList.add('active');\n        }\n\n        currentCategory = category;\n        displayApps(searchInput.value);\n\n        closeDetails();\n\n        const url = new URL(window.location);\n        url.searchParams.set('category', category);\n        history.pushState({ category: category }, '', url);\n    }\n\n    // Event Listeners\n    categoryList.addEventListener('click', (e) => {\n        const categoryItem = e.target.closest('.category-item');\n        if (categoryItem) {\n            updateCategoryFilter(categoryItem.dataset.category);\n        }\n    });\n\n    searchInput.addEventListener('input', (e) => {\n        const searchTerm = e.target.value;\n        displayApps(searchTerm);\n\n        // Update URL with search term\n        const url = new URL(window.location);\n        url.searchParams.set('search', searchTerm);\n        history.pushState({ search: searchTerm }, '', url);\n    });\n\n    // Initial load\n    fetchAppData();\n\n    // Handle popstate event to sync URL with app state\n    window.addEventListener('popstate', (e) => {\n        const url = new URL(window.location);\n        const category = url.searchParams.get('category') || 'All';\n        const search = url.searchParams.get('search') || '';\n        const app = url.searchParams.get('app') || '';\n\n        updateCategoryFilter(category);\n        displayApps(search);\n\n        if (app) {\n            showAppDetails(app, apps);\n        } else {\n            closeDetails();\n        }\n    });\n\n    function closeDetails() {\n        const appDetails = document.querySelector('.app-details');\n        if (appDetails) {\n            appDetails.classList.add('hidden');\n\n            // Update URL to remove app details\n            const url = new URL(window.location);\n            url.searchParams.delete('app');\n            history.pushState({}, '', url);\n        }\n    }\n});\n"],
  "mappings": "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",
  "names": ["apps", "setApps", "newApps", "appGrid", "categoryList", "searchInput", "categories", "currentCategory", "fetchAppData", "data", "setApps", "processCategories", "initializeFromUrl", "displayApps", "error", "url", "initialCategory", "initialSearch", "initialApp", "updateCategoryFilter", "apps", "app", "cat", "category", "count", "sortedCategories", "a", "b", "filterAppsByCategory", "createAppCard", "categoryTags", "searchTerm", "filteredApps", "term", "appCards", "tag", "e", "card", "appName", "item", "categoryItem", "closeDetails", "search", "appDetails"]
}
